package models;

import java.util.Observable;

import controller.MDIParent;
import database.InventoryTableGateway;
import database.GatewayException;

/**
 * Inventory data
 * @author Justin Wilson
 *
 */
public class Inventory extends Observable {
	/**
	 * validation error messages
	 */
	public static final String ERRORMSG_INVALID_ID = "Invalid id!";
	public static final String ERRORMSG_INVALID_INVENTORY_WAREHOUSE_ID = "Invalid inventory Warehouse Id!";
	public static final String ERRORMSG_INVALID_INVENTORY_PART_ID = "Invalid inventory Part Id!";
	public static final String ERRORMSG_INVALID_INVENTORY_QUALITY = "Invalid inventory quantity!";
	public static final String DEFAULT_EMPTY_INVENTORYNAME = "Unknown";

	public static final int INVALID_ID = 0;
	
	/**
	 * Unique id of Inventory record
	 * Note: Should be automatically generated by the system (no setter)
	 */
	private long id;
	private Long part_id, warehouse_id;
	private double quantity;
	
	/**
	 * Database connection for the Inventory (same gateway used by PersonInventory) 
	 */
	private InventoryTableGateway gateway;

	public Inventory() {
		id = INVALID_ID;
		part_id = warehouse_id = 0L;
		quantity = 0L;
	}

	
	public Inventory( long warehouse_id, long part_id, long qty) {
		this();
		
		//validate parameters
		if(!validQuantity(qty))
			throw new IllegalArgumentException(ERRORMSG_INVALID_INVENTORY_QUALITY);
		
		this.id = INVALID_ID;
		this.warehouse_id = warehouse_id;
		this.part_id = part_id;
		this.quantity = qty;
	}
	
	public Inventory( long id, long warehouse_id, long part_id, long qty) {
		this( warehouse_id, part_id, qty );
		this.id = id;
	}
	
	/**
	 * Tells the model that update has finished so it can finish the update
	 * E.g., notify observers
	 */
	public void finishUpdate() throws GatewayException {
		Inventory orig = null;

		try {
			//if id is 0 then this is a new Inventory to insert, else its an update
			if(this.getId() == 0) {
				//set id to the long returned by insertPerson
				this.setId(gateway.insertInventory(this));
				
			} else {
				//fetch inventory from db table in case this fails
			
				orig = gateway.fetchInventory(this.getId());
				
				//try to save to the database
				gateway.saveInventory(this);
			}
			
			//if gateway ok then notify observers
			notifyObservers();
			
		} catch(GatewayException e) {
			//if fails then try to refetch model fields from the database
			if(orig != null) {
				this.setQuantity(orig.getQuantity());
			}
			throw new GatewayException("Error trying to save the Inventory object!");
		}
	}

	/**
	 * delete this object through the gateway (i.e., db)
	 */
	public void delete() throws GatewayException {
		//if id is 0 then nothing to do in the gateway (record has not been saved yet)
		if(this.getId() == 0) 
			return;
			try {
				gateway.deleteInventory(this.getId());
			} catch (GatewayException e) {
				throw new GatewayException(e.getMessage());
			}
	}

	public WarehouseList getWarehouseList(MDIParent m){
		return m.getWarehouseList();
	}
	
	public PartList getPartList(MDIParent m){
		return m.getPartList();
	}
	
	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	/**
	 * Returns PartId of Inventory
	 * @return
	 */
	public long getPartId() {
		return this.part_id;
	}

	
	/**
	 * Determines if given PartId value is valid
	 * Rules: cannot be null, and >= 0.0
	 * 
	 */
	public boolean validPartId(Long inventory_part_Id) {
		
		if(inventory_part_Id == null)
			return false;
		if(inventory_part_Id < 1)
			return false;
		return true;
	}
	
	/**
	 * Sets PartId of Inventory
	 * PartID cannot be null
	 * @return
	 */
	public void setPartId(long inventory_part_Id) {
		if(!validPartId(inventory_part_Id))
			throw new IllegalArgumentException(ERRORMSG_INVALID_INVENTORY_PART_ID);
		this.part_id = inventory_part_Id;
		//get ready to notify observers (notify is called in finishUpdate())
		setChanged();
	}

	/**
	 * Returns warehouse_id of Inventory
	 * @return
	 */
	public long getWarehouseId() {
		return this.warehouse_id;
	}

	
	/**
	 * Determines if given warehouse_id value is valid
	 * 
	 */
	public boolean validWarehouseId(Long Warehouse_Id) {
		if(Warehouse_Id == null)
			return false;
		if( Warehouse_Id < 1) 
			return false;
		return true;
		
	}
	
	/**
	 * Sets WarehouseId of Inventory
	 * inventoryId cannot be null
	 * @return
	 */
	public void setWarehouseId(long Warehouse_Id) {
		if(!validQuantity(Warehouse_Id))
			throw new IllegalArgumentException(ERRORMSG_INVALID_INVENTORY_WAREHOUSE_ID);
		this.warehouse_id = Warehouse_Id;
		//get ready to notify observers (notify is called in finishUpdate())
		setChanged();
	}

	
	/**
	 * Returns inventory qty
	 * @return
	 */
	public double getQuantity() {
		return this.quantity;
	}

	
	/**
	 * Determines if given quantity value is valid
	 * Rules: cannot be null, and >= 0.0
	 * 
	 */
	public boolean validQuantity(double qty) {
		if(qty < 0)
			return false;
		return true;
	}
	
	/**
	 * Sets Quantity of Inventory
	 * inventoryId cannot be null
	 * @return
	 */
	public void setQuantity(double qty) {
		if(!validQuantity(qty))
			throw new IllegalArgumentException(ERRORMSG_INVALID_INVENTORY_QUALITY);
		this.quantity = qty;
		//get ready to notify observers (notify is called in finishUpdate())
		setChanged();
	}

	
	
	public InventoryTableGateway getGateway() {
		return gateway;
	}

	public void setGateway(InventoryTableGateway gateway) {
		this.gateway = gateway;
	}
}
