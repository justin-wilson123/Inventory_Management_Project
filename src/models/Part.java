package models;

import java.sql.Timestamp;
import java.util.Observable;

import database.PartTableGateway;
import database.GatewayException;

/**
 * Common Part information
 * Extends Observable so observers can register for change notifications
 * @author Justin Wilson
 *
 */
public class Part extends Observable {
	/**
	 * validation error messages
	 */
	public static final String ERRORMSG_INVALID_ID = "Invalid id!";
	public static final String ERRORMSG_INVALID_PART_NUMBER = "Invalid part number!";
	public static final String ERRORMSG_INVALID_PART_NAME = "Invalid part name!";
	public static final String ERRORMSG_INVALID_VENDOR = "Invalid vendor!";
	public static final String ERRORMSG_INVALID_UNIT_OF_QTY = "Invalid unit; 'Linear Ft.' or 'Pieces' only!";
	public static final String ERRORMSG_INVALID_VENDOR_ID = "Invalid vendor id!";
	public static final String DEFAULT_EMPTY_PART = "Unknown";
	

	public static final int INVALID_ID = 0;
	
	/**
	 * Unique id of Part record
	 * Note: Should be automatically generated by the system (no setter)
	 */
	private long id;
	
	public String [] unit = {"Linear Ft.", "Pieces"}; 

	/**
	 * First and last name of Part. non-unique and optional. 
	 * Default to empty string. toString will replace empty strings with "unknown"  
	 */
	private String part_number, part_name, vendor_name, unit_of_qty, vendor_part_id;
	
	private String user_access;
	private Timestamp datetime;
	
	/**
	 * Database connection for the Part (same gateway used by PersonPart) 
	 */
	private PartTableGateway gateway;

	public Part() {
		id = INVALID_ID;
		part_number = "";
		part_name = "";
		unit_of_qty = "";
		vendor_part_id = "";
		vendor_name = "";
	}

	public Part(String pnum, String pname, String un_of_qty, String VendorId, String vend) {
		this();
		//validate parameters
		if(!validPartNumber(pnum))
			throw new IllegalArgumentException(ERRORMSG_INVALID_PART_NUMBER);
		if(!validPartName(pname))
			throw new IllegalArgumentException(ERRORMSG_INVALID_PART_NAME);
		if(!validUnitOfQty(un_of_qty))
			throw new IllegalArgumentException(ERRORMSG_INVALID_UNIT_OF_QTY);
		if(!validVendorPart(VendorId))
			throw new IllegalArgumentException(ERRORMSG_INVALID_VENDOR_ID);
		if(!validVendor(vend))
			throw new IllegalArgumentException(ERRORMSG_INVALID_VENDOR);
		
		part_number = pnum;
		part_name = pname;
		unit_of_qty = un_of_qty;
		vendor_part_id = VendorId;
		vendor_name = vend;
	}
	

	/**
	 * 5-argument constructor for creating a part object and setting the id (read from database)
	 * @param id Id of part instance to create (given from database) CANNOT BE 0
	 * @param pnum Part Name
	 * @param pname Parts Name
	 * @param vend Part Vendor
	 * @param un_of_qty Unit of Quantity
	 * @param vend_part_num Vendors Part Number
	 */
	public Part(long id, String pnum, String pname, String un_of_qty, String VendorId, String vend) {
		this(pnum, pname, un_of_qty, VendorId, vend);
		if(id < 1)
			throw new IllegalArgumentException(ERRORMSG_INVALID_ID);
		setId(id);
	}
	
	/**
	 * Returns the Part's hopefully unique id
	 * @return
	 */
	public long getId() {
		return id;
	}

	/**
	 * Sets Part's id
	 * Should only be called by the gateway when fetching part record from database (via fetch or add)
	 * @param id
	 */
	public void setId(long id) {
		this.id = id;
	}
	
	public String getPartNumber() {
		return part_number;
	}
	
	/**
	 * Determines if given part number is valid
	 * Rules: cannot be null, length must be > 0 and <= 20
	 * @param pnum value to test
	 * @return
	 */
	public boolean validPartNumber(String pnum) {
		if(pnum == null)
			return false;
		if(pnum == "") 
			return false;
		if(pnum.length() > 20)
			return false;
		if(pnum.length() == 0)
			return false;
		return true;
	}
	
	
	

	/**
	 * Sets number of part
	 * Part number cannot be null
	 * @return
	 */
	public void setPartNumber(String part_number) {
		if(!validPartName(part_number))
			throw new IllegalArgumentException(ERRORMSG_INVALID_PART_NUMBER);
		this.part_number = part_number;
		//get ready to notify observers (notify is called in finishUpdate())
		setChanged();
	}
	
	
	/**
	 * Returns the part name
	 * @return
	 */
	public String getPartName() {
		return part_name;
	}
	
	/**
	 * Determines if given part name is valid
	 * Rules: cannot be null or blank, length must be > 0 and <= 255 
	 * @param pname value to test
	 * @return
	 */
	public boolean validPartName(String pname) {
		if(pname == null)
			return false;
		if(pname == "")
			return false;
		if(pname.length() > 255)
			return false;
		if(pname.length() == 0)
			return false;
		return true;
	}
	
	
	

	/**
	 * Sets name of part
	 * Part name cannot be null
	 * @return
	 */
	public void setPartName(String part_name) {
		if(!validPartName(part_name))
			throw new IllegalArgumentException(ERRORMSG_INVALID_PART_NAME);
		this.part_name = part_name;
		//get ready to notify observers (notify is called in finishUpdate())
		setChanged();
	}

	/**
	 * Returns address of part
	 * @return
	 */
	public String getVendor() {
		return vendor_name;
	}
	
	/**
	 * Determines if vendor value is valid
	 * Rules: cannot be null, length must be >= 0 and <= 255 
	 * @param fn First name value to test
	 * @return
	 */
	public boolean validVendor(String vend) {
		if(vend == null)
			return false;
		if(vend.length() > 255)
			return false;
		return true;
	}
	
	
	
	/**
	 * Sets vendor of part
	 * Vendor cannot be null
	 * @return
	 */
	public void setVendor(String vendor) {
		if(!validVendor(vendor))
			throw new IllegalArgumentException(ERRORMSG_INVALID_VENDOR);
		this.vendor_name = vendor;
		//get ready to notify observers (notify is called in finishUpdate())
		setChanged();
	}

	/**
	 * Returns unit of quantity
	 * @return
	 */
	public String getUnitOfQuantity() {
		return unit_of_qty;
	}
	
	/**
	 * Determines if given unit of quantity is valid
	 * Rules: "Linear Ft." or "Pieces"
	 * @param un_of_qty value to test
	 * @return
	 */
	public boolean validUnitOfQty(String un_of_qty) {
		if(un_of_qty.equals("Linear Ft."))
			return true;
		if(un_of_qty.equals("Pieces"))
			return true;
		return false;
	}
	

	/**
	 * Sets unit of quantity of part
	 * Unit of quantity must be Linear Ft or Pieces
	 * @return
	 */
	public void setUnitOfQuantity(String unit_of_qty) {
		if(!validUnitOfQty(unit_of_qty))
			throw new IllegalArgumentException(ERRORMSG_INVALID_UNIT_OF_QTY);
		this.unit_of_qty = unit_of_qty;
		//get ready to notify observers (notify is called in finishUpdate())
		setChanged();
	}
	
	/**
	 * Returns Vendor's part number
	 * @return
	 */
	public String getVendorsPartNumber() {
		return vendor_part_id;
	}

	/**
	 * Determines if vendor's part number is valid
	 * Rules: cannot be null, length must be > 0 and <= 255 
	 * @param  First name value to test
	 * @return
	 */
	public boolean validVendorPart(String vend_part_num) {
		if(vend_part_num == null)
			return false;
		if(vend_part_num.length() > 255)
			return false;
		return true;
	}
	
	
	
	/**
	 * Sets vendor's part number
	 * Vendor's part number cannot be null
	 * @return
	 */
	public void setVendorsPartNumber(String vendors_part_number) {
		if(!validVendorPart(vendors_part_number))
			throw new IllegalArgumentException(ERRORMSG_INVALID_VENDOR_ID);
		this.vendor_part_id = vendors_part_number;
		//get ready to notify observers (notify is called in finishUpdate())
		setChanged();
	}
	
	
	public void setUserAccess(String user){
		this.user_access = user;
	}
	
	public String getUserAccess(){
		return this.user_access;
	}
	
	/**
	 * Helper method to return either part's name with space between or "Unknown" if blank
	 * @return
	 */
	public String getDefaultIfBlank() {
		String ret = part_name;
		ret = ret.trim();
		if(ret.length() == 0)
			ret = DEFAULT_EMPTY_PART;
		return ret;
	}

	/**
	 * Tells the model that update has finished so it can finish the update
	 * E.g., notify observers
	 */
	public void finishUpdate() throws GatewayException {
		Part orig = null;

		try {
			//if id is 0 then this is a new Part to insert, else its an update
			if(this.getId() == 0) {
				//set id to the long returned by insertPerson
				this.setId(gateway.insertPart(this));
				
			} else {
				//fetch dog from db table in case this fails
			
				orig = gateway.fetchPart(this.getId());
		
				//try to save to the database
				gateway.savePart(this);

			}
			
			//if gateway ok then notify observers
			//System.out.println("DEBUG: Part notify");
			notifyObservers();
			
		} catch(GatewayException e) {
			//if fails then try to refetch model fields from the database
			if(orig != null) {
				this.setPartNumber(orig.getPartNumber());
				this.setPartName(orig.getPartName());
				this.setVendor(orig.getVendor());
				this.setUnitOfQuantity(orig.getUnitOfQuantity());
				this.setVendorsPartNumber(orig.getVendorsPartNumber());
			}
			throw new GatewayException("Error trying to save the Part object!");
		}
	}

	/**
	 * delete this object through the gateway (i.e., db)
	 */
	public void delete() throws GatewayException {
		//if id is 0 then nothing to do in the gateway (record has not been saved yet)
		if(this.getId() == 0) 
			return;
			try {
				gateway.deletePart(this.getId());
			} catch (GatewayException e) {
				throw new GatewayException(e.getMessage());
			}
	}


	public PartTableGateway getGateway() {
		return gateway;
	}

	public void setGateway(PartTableGateway gateway) {
		this.gateway = gateway;
	}
}
